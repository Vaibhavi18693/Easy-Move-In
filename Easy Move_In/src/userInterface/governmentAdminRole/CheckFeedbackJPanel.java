/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.governmentAdminRole;

import business.EcoSystem;
import business.FeedBackForm;
import business.organization.Organization;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.text.DecimalFormat;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

/**
 *
 * @author Hardik
 */
public class CheckFeedbackJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CheckFeedbackJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;

    public CheckFeedbackJPanel() {
        initComponents();
    }

    public CheckFeedbackJPanel(JPanel userProcessContainer, EcoSystem ecoSystem) {
        this();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        facilitiesSelect.removeAllItems();
        facilitiesSelect.addItem(Organization.OrganizationType.ELECTRICIAN);
        facilitiesSelect.addItem(Organization.OrganizationType.TRANSPORT);
        facilitiesSelect.addItem(Organization.OrganizationType.SEWAGE);
        facilitiesSelect.addItem(Organization.OrganizationType.PLUMBER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        piePanel = new javax.swing.JPanel();
        facilitiesSelect = new javax.swing.JComboBox();
        backButton = new javax.swing.JButton();

        javax.swing.GroupLayout piePanelLayout = new javax.swing.GroupLayout(piePanel);
        piePanel.setLayout(piePanelLayout);
        piePanelLayout.setHorizontalGroup(
            piePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        piePanelLayout.setVerticalGroup(
            piePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );

        facilitiesSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        facilitiesSelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                facilitiesSelectItemStateChanged(evt);
            }
        });
        facilitiesSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facilitiesSelectActionPerformed(evt);
            }
        });

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(piePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(facilitiesSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(240, 240, 240)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facilitiesSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(piePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void facilitiesSelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_facilitiesSelectItemStateChanged
        // TODO add your handling code here:
        Organization.OrganizationType type = (Organization.OrganizationType) facilitiesSelect.getSelectedItem();
        DefaultPieDataset defaultPieDataset = null;
        if(type == null)
            return;
        switch (type) {
            case PLUMBER:
                defaultPieDataset = createPlumbingDataSet();
                break;
            case ELECTRICIAN:
                defaultPieDataset = createElecDataSet();
                break;
            case TRANSPORT:
                defaultPieDataset = createTransDataSet();
                break;
            case SEWAGE:
                defaultPieDataset = createSewageDataSet();
                break;
            default:
                break;
        }
        
        if(defaultPieDataset != null) {
            JFreeChart chart = createChart(defaultPieDataset);
        piePanel.setLayout(new java.awt.BorderLayout());
        ChartPanel cp = new ChartPanel(chart) {

            @Override
            public Dimension getPreferredSize() {
                return new Dimension(900, 550);
            }
        };
        cp.setMouseWheelEnabled(true);
        piePanel.add(cp, BorderLayout.CENTER);
        piePanel.validate();
        }
    }//GEN-LAST:event_facilitiesSelectItemStateChanged

    private JFreeChart createChart(PieDataset dataset) {
        JFreeChart chart = ChartFactory.createPieChart(
                "Feedbacks", // chart title
                dataset, // data
                false, // include legend
                true,
                false
        );

        PiePlot plot = (PiePlot) chart.getPlot();
        plot.setSectionOutlinesVisible(false);
        plot.setLabelFont(new Font("SansSerif", Font.PLAIN, 12));
        plot.setNoDataMessage("No data available");
        plot.setCircular(true);
        plot.setLabelGap(0.02);
        PieSectionLabelGenerator gen = new StandardPieSectionLabelGenerator(
                "{0}: {1} ({2})", new DecimalFormat("0.00"), new DecimalFormat("0.00%"));
        plot.setLabelGenerator(gen);
        return chart;
    }
    
    private void facilitiesSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facilitiesSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_facilitiesSelectActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        GovernmentAdminWorkAreaJPanel gawajp = (GovernmentAdminWorkAreaJPanel)userProcessContainer.getComponent(userProcessContainer.getComponentCount() - 1);
        gawajp.populateEventTable();
        gawajp.populateRequestTable();
        ((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox facilitiesSelect;
    private javax.swing.JPanel piePanel;
    // End of variables declaration//GEN-END:variables

    private DefaultPieDataset createPlumbingDataSet() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        int verySat = 0;
        int sat = 0;
        int unsure = 0;
        int notSat = 0;
        for (FeedBackForm feedBackForm : ecoSystem.getFeedBackList()) {
            if (feedBackForm.isPlumVerySatis()) {
                verySat++;
            } else if (feedBackForm.isPlumSatis()) {
                sat++;
            } else if (feedBackForm.isPlumUnsure()) {
                unsure++;
            } else if (feedBackForm.isPlumNotSatis()) {
                notSat++;
            }
        }
        dataset.setValue("Very Satisfied", verySat);
        dataset.setValue("Satisfied", sat);
        dataset.setValue("Unsure", unsure);
        dataset.setValue("Not Satisfied", notSat);
        return dataset;
    }

    private DefaultPieDataset createElecDataSet() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        int verySat = 0;
        int sat = 0;
        int unsure = 0;
        int notSat = 0;
        for (FeedBackForm feedBackForm : ecoSystem.getFeedBackList()) {
            if (feedBackForm.isElecVerySatis()) {
                verySat++;
            } else if (feedBackForm.isElecSatis()) {
                sat++;
            } else if (feedBackForm.isElecUnsure()) {
                unsure++;
            } else if (feedBackForm.isElecNotSatis()) {
                notSat++;
            }
        }
        dataset.setValue("Very Satisfied", verySat);
        dataset.setValue("Satisfied", sat);
        dataset.setValue("Unsure", unsure);
        dataset.setValue("Not Satisfied", notSat);
        return dataset;
    }

    private DefaultPieDataset createSewageDataSet() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        int verySat = 0;
        int sat = 0;
        int unsure = 0;
        int notSat = 0;
        for (FeedBackForm feedBackForm : ecoSystem.getFeedBackList()) {
            if (feedBackForm.isSewVerySatis()) {
                verySat++;
            } else if (feedBackForm.isSewSatis()) {
                sat++;
            } else if (feedBackForm.isSewUnsure()) {
                unsure++;
            } else if (feedBackForm.isSewNotSatis()) {
                notSat++;
            }
        }
        dataset.setValue("Very Satisfied", verySat);
        dataset.setValue("Satisfied", sat);
        dataset.setValue("Unsure", unsure);
        dataset.setValue("Not Satisfied", notSat);
        return dataset;
    }

    private DefaultPieDataset createTransDataSet() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        int verySat = 0;
        int sat = 0;
        int unsure = 0;
        int notSat = 0;
        for (FeedBackForm feedBackForm : ecoSystem.getFeedBackList()) {
            if (feedBackForm.isTransVerySatis()) {
                verySat++;
            } else if (feedBackForm.isTransSatis()) {
                sat++;
            } else if (feedBackForm.isTransUnsure()) {
                unsure++;
            } else if (feedBackForm.isTransNotSatis()) {
                notSat++;
            }
        }
        dataset.setValue("Very Satisfied", verySat);
        dataset.setValue("Satisfied", sat);
        dataset.setValue("Unsure", unsure);
        dataset.setValue("Not Satisfied", notSat);
        return dataset;
    }

}
